sequenceDiagram
    actor Player
    participant Frontend
    participant Backend
    participant GameService
    participant ReconnaissanceGestes
    participant OpenCV
    participant AIModel

    Player->>Frontend: Clicks "Start Game"
    Frontend->>Backend: POST /api/game/start
    Backend->>GameService: start_game()
    GameService-->>Backend: {message: "Game started", current_letter: "A"}
    Backend-->>Frontend: Game started response
    Frontend->>Player: Display "Show letter A"

    loop For each letter (A to D)
        Frontend->>Backend: GET /api/game/check (every 1 second)
        Backend->>OpenCV: Capture frame
        OpenCV-->>Backend: Frame captured
        Backend->>ReconnaissanceGestes: traiter_frame(frame)
        ReconnaissanceGestes->>OpenCV: Process frame
        ReconnaissanceGestes->>AIModel: Predict gesture
        AIModel-->>ReconnaissanceGestes: Predicted gesture
        ReconnaissanceGestes-->>Backend: {predicted_character, frame}
        Backend->>GameService: check_gesture(predicted_gesture)
        
        alt Correct gesture
            GameService-->>Backend: {message: "Correct!", new_letter, score}
            Backend-->>Frontend: Correct gesture response
            Frontend->>Player: Display "Correct! Show next letter"
        else Incorrect gesture
            GameService-->>Backend: {message: "Incorrect, try again"}
            Backend-->>Frontend: Incorrect gesture response
            Frontend->>Player: Display "Incorrect, try again"
        end
    end

    Backend->>GameService: check_gesture("D")
    GameService-->>Backend: {message: "Game ended", final_score}
    Backend-->>Frontend: Game completed response
    Frontend->>Player: Display "Congratulations! Game completed"
    Frontend->>Player: Show "Play Again" button

    